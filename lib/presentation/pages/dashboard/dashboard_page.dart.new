import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../application/blocs/auth/auth_bloc.dart';
import '../../../application/blocs/auth/auth_event.dart';

// Enum para las secciones simuladas
enum UCIPSSection {
  dashboard,
  registro,
  consulta,
  turnado,
  acuse,
  usuarios,
  auditoria,
}

class DashboardPage extends StatefulWidget {
  const DashboardPage({Key? key}) : super(key: key);

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> {
  UCIPSSection section = UCIPSSection.dashboard;

  // Simulación de datos
  int documentosRegistrados = 12;
  int turnadosPendientes = 3;
  int conAcuse = 8;
  List<Map<String, String>> documentos = [
    {
      'tipo': 'MEM',
      'asunto': 'Solicitud de material',
      'area': 'Recursos Materiales',
      'estatus': 'Turnado',
    },
    {
      'tipo': 'OF',
      'asunto': 'Oficio de respuesta',
      'area': 'Dirección',
      'estatus': 'Archivado',
    },
    {
      'tipo': 'OC',
      'asunto': 'Orden de compra',
      'area': 'Compras',
      'estatus': 'Pendiente',
    },
  ];
  String? archivoNombre;
  bool registroExitoso = false;
  String? turnadoA;
  bool acuseHecho = false;

  // Formulario de registro
  final _formKey = GlobalKey<FormState>();
  String tipoDocumento = 'Entrada';
  String asunto = '';
  String area = '';
  String solicitante = '';
  bool acuse = false;

  void _simularSubirArchivo() {
    setState(() {
      archivoNombre = 'documento_prueba.pdf';
    });
  }

  // Función optimizada para evitar problemas de estado y rendering
  void _registrarDocumento() {
    // Prevenir múltiples llamadas mientras se procesa
    if (registroExitoso) return;
    
    // Validar formulario
    if (!(_formKey.currentState?.validate() ?? false)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Por favor completa todos los campos requeridos'),
          backgroundColor: Colors.amber,
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(10),
        ),
      );
      return;
    }

    // Validar archivo
    if (archivoNombre == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Por favor adjunta un documento'),
          backgroundColor: Colors.amber,
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(10),
        ),
      );
      return;
    }

    // Crear copias locales de los valores actuales
    final String tipoDoc = tipoDocumento == 'Entrada' ? 'MEM' : 'OF';
    final String currentAsunto = asunto;
    final String currentArea = area;

    // Mostrar indicador de carga
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => WillPopScope(
        onWillPop: () async => false,
        child: const Center(
          child: Card(
            child: Padding(
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('Registrando documento...', style: TextStyle(fontWeight: FontWeight.bold)),
                ],
              ),
            ),
          ),
        ),
      ),
    );

    // Usar un Future para desacoplar la actualización de estado
    Future.delayed(const Duration(milliseconds: 500), () {
      if (!mounted) return;

      try {
        // Actualizar datos
        documentosRegistrados++;
        documentos.add({
          'tipo': tipoDoc,
          'asunto': currentAsunto,
          'area': currentArea,
          'estatus': 'Pendiente',
        });

        // Cerrar diálogo de carga
        Navigator.of(context).pop();

        // Mostrar mensaje de éxito (primero actualizar esto)
        setState(() {
          registroExitoso = true;
        });

        // Retardo para permitir que la UI se actualice correctamente
        Future.delayed(const Duration(seconds: 1), () {
          if (!mounted) return;
          
          // Navegar a consulta (esto es opcional, puedes comentarlo si causa problemas)
          setState(() {
            section = UCIPSSection.consulta;
          });
        });
      } catch (e) {
        // Cerrar diálogo si hay error
        Navigator.of(context).pop();
        
        // Mostrar mensaje de error
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    });
  }

  Widget _buildDashboard() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Expanded(
                child: _ReusableWidget(
                  text: 'Documentos registrados: $documentosRegistrados',
                  icon: Icons.folder_open,
                  color: const Color(0xFFBBDEFB),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _ReusableWidget(
                  text: 'Turnados pendientes: $turnadosPendientes',
                  icon: Icons.send,
                  color: const Color(0xFFC8E6C9),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _ReusableWidget(
                  text: 'Con acuse: $conAcuse',
                  icon: Icons.verified,
                  color: const Color(0xFFFFF9C4),
                ),
              ),
            ],
          ),
          const SizedBox(height: 32),
          const _ReusableWidget(
            text: 'Bienvenido al sistema UCIPS. Selecciona una sección en el menú.',
            icon: Icons.info_outline,
            color: Color(0xFFE3F2FD),
          ),
        ],
      ),
    );
  }

  // Widget mejorado para renderizado seguro sin constraints infinitos
  Widget _buildRegistro() {
    // Usamos key para forzar un rebuild completo cuando cambia el estado
    return Builder(
      key: ValueKey('registro_form_${registroExitoso}_${archivoNombre ?? "sin_archivo"}'),
      builder: (context) {
        return Material(
          color: Colors.transparent,
          child: LayoutBuilder(
            builder: (context, outerConstraints) {
              // Calculamos un ancho seguro basado en el viewport
              final screenWidth = MediaQuery.of(context).size.width;
              final maxWidth = screenWidth > 800 
                  ? 600.0 
                  : (screenWidth > 600 ? 550.0 : screenWidth * 0.92);
              
              // Aseguramos que tenemos constraints específicos para evitar cualquier valor infinito
              return SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
                physics: const ClampingScrollPhysics(),
                child: Center(
                  child: Container(
                    width: maxWidth,
                    constraints: BoxConstraints(
                      minWidth: 300,
                      maxWidth: maxWidth,
                      minHeight: 100,
                    ),
                    child: Card(
                      elevation: 4,
                      shadowColor: Colors.black.withOpacity(0.2),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                      clipBehavior: Clip.antiAlias, // Previene overflow
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: _RegistroDocumentoForm(
                          registroExitoso: registroExitoso,
                          archivoNombre: archivoNombre,
                          tipoDocumento: tipoDocumento,
                          asunto: asunto,
                          area: area,
                          solicitante: solicitante,
                          acuse: acuse,
                          formKey: _formKey,
                          onTipoDocumentoChanged: (v) => setState(() => tipoDocumento = v),
                          onAsuntoChanged: (v) => setState(() => asunto = v),
                          onAreaChanged: (v) => setState(() => area = v),
                          onSolicitanteChanged: (v) => setState(() => solicitante = v),
                          onAcuseChanged: (v) => setState(() => acuse = v),
                          onSubirArchivo: _simularSubirArchivo,
                          onRegistrar: _registrarDocumento,
                        ),
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        );
      }
    );
  }

  Widget _buildConsulta() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Consulta de Documentos', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: DataTable(
              columns: const [
                DataColumn(label: Text('Tipo')),
                DataColumn(label: Text('Asunto')),
                DataColumn(label: Text('Área')),
                DataColumn(label: Text('Estatus')),
                DataColumn(label: Text('Acciones')),
              ],
              rows: documentos.map((doc) {
                return DataRow(cells: [
                  DataCell(Text(doc['tipo'] ?? '')),
                  DataCell(Text(doc['asunto'] ?? '')),
                  DataCell(Text(doc['area'] ?? '')),
                  DataCell(Text(doc['estatus'] ?? '')),
                  DataCell(Row(
                    children: [
                      IconButton(
                        icon: const Icon(Icons.visibility),
                        tooltip: 'Ver',
                        onPressed: () {},
                      ),
                      IconButton(
                        icon: const Icon(Icons.send),
                        tooltip: 'Turnar',
                        onPressed: () => setState(() => section = UCIPSSection.turnado),
                      ),
                      IconButton(
                        icon: const Icon(Icons.picture_as_pdf),
                        tooltip: 'Exportar PDF',
                        onPressed: () {},
                      ),
                    ],
                  )),
                ]);
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTurnado() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Turnar Documento', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          DropdownButtonFormField<String>(
            value: turnadoA,
            decoration: const InputDecoration(labelText: 'Turnar a'),
            items: const [
              DropdownMenuItem(value: 'Dirección', child: Text('Dirección')),
              DropdownMenuItem(value: 'Rectoría', child: Text('Rectoría')),
              DropdownMenuItem(value: 'Compras', child: Text('Compras')),
            ],
            onChanged: (v) => setState(() => turnadoA = v),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: turnadoA != null
                ? () {
                    setState(() {
                      turnadosPendientes++;
                      section = UCIPSSection.consulta;
                    });
                  }
                : null,
            child: const Text('Turnar'),
          ),
        ],
      ),
    );
  }

  Widget _buildAcuse() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Acuse Digital', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          if (!acuseHecho)
            ElevatedButton(
              onPressed: () => setState(() => acuseHecho = true),
              child: const Text('Acusar Recibido'),
            ),
          if (acuseHecho)
            const _ReusableWidget(
              text: '¡Acuse realizado exitosamente!',
              icon: Icons.check_circle_outline,
              color: Color(0xFFC8E6C9),
            ),
        ],
      ),
    );
  }

  Widget _buildUsuarios() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Gestión de Usuarios', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          DataTable(
            columns: const [
              DataColumn(label: Text('Usuario')),
              DataColumn(label: Text('Rol')),
              DataColumn(label: Text('Área')),
              DataColumn(label: Text('Estado')),
            ],
            rows: const [
              DataRow(cells: [
                DataCell(Text('admin@ucips.gob.mx')),
                DataCell(Text('Administrador')),
                DataCell(Text('Dirección General')),
                DataCell(Text('Activo')),
              ]),
              DataRow(cells: [
                DataCell(Text('usuario1@ucips.gob.mx')),
                DataCell(Text('Usuario Común')),
                DataCell(Text('Compras')),
                DataCell(Text('Activo')),
              ]),
              DataRow(cells: [
                DataCell(Text('auditor@ucips.gob.mx')),
                DataCell(Text('Auditor')),
                DataCell(Text('Auditoría')),
                DataCell(Text('Inactivo')),
              ]),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAuditoria() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Bitácora de Auditoría', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          DataTable(
            columns: const [
              DataColumn(label: Text('Fecha')),
              DataColumn(label: Text('Usuario')),
              DataColumn(label: Text('Acción')),
              DataColumn(label: Text('Área')),
            ],
            rows: const [
              DataRow(cells: [
                DataCell(Text('2025-05-21')),
                DataCell(Text('admin@ucips.gob.mx')),
                DataCell(Text('Registro de documento')),
                DataCell(Text('Dirección General')),
              ]),
              DataRow(cells: [
                DataCell(Text('2025-05-20')),
                DataCell(Text('usuario1@ucips.gob.mx')),
                DataCell(Text('Turnado de documento')),
                DataCell(Text('Compras')),
              ]),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    const userName = 'Lic. Juan Pérez';
    const userRole = 'Administrador';
    const userArea = 'Dirección General';
    return Scaffold(
      appBar: AppBar(
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
        title: const Text('Unidad de Control Institucional de Procesos y Servicios', style: TextStyle(fontSize: 16)),
        backgroundColor: const Color(0xFF1A73E8),
        actions: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircleAvatar(
                  backgroundColor: Colors.white,
                  child: Icon(Icons.account_circle, color: Color(0xFF1A73E8)),
                ),
                const SizedBox(width: 8),
                Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(userName, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w500)),
                    Row(
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.white24,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(userRole, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 13)),
                        ),
                        const SizedBox(width: 8),
                        Text(userArea, style: const TextStyle(color: Colors.white70, fontSize: 13)),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: const BoxDecoration(color: Color(0xFF1A73E8)),
              child: Row(
                children: [
                  Image.asset('assets/icons/UCIPS-02.png', height: 40),
                  const SizedBox(width: 12),
                  const Text('UCIPS', style: TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold)),
                ],
              ),
            ),
            ListTile(
              leading: const Icon(Icons.dashboard),
              title: const Text('Dashboard'),
              selected: section == UCIPSSection.dashboard,
              onTap: () => setState(() => section = UCIPSSection.dashboard),
            ),
            ListTile(
              leading: const Icon(Icons.add_box_rounded),
              title: const Text('Registrar Documento'),
              selected: section == UCIPSSection.registro,
              onTap: () => setState(() => section = UCIPSSection.registro),
            ),
            ListTile(
              leading: const Icon(Icons.search),
              title: const Text('Consulta de Documentos'),
              selected: section == UCIPSSection.consulta,
              onTap: () => setState(() => section = UCIPSSection.consulta),
            ),
            ListTile(
              leading: const Icon(Icons.send),
              title: const Text('Turnado'),
              selected: section == UCIPSSection.turnado,
              onTap: () => setState(() => section = UCIPSSection.turnado),
            ),
            ListTile(
              leading: const Icon(Icons.verified_user),
              title: const Text('Acuse Digital'),
              selected: section == UCIPSSection.acuse,
              onTap: () => setState(() => section = UCIPSSection.acuse),
            ),
            ListTile(
              leading: const Icon(Icons.people),
              title: const Text('Usuarios'),
              selected: section == UCIPSSection.usuarios,
              onTap: () => setState(() => section = UCIPSSection.usuarios),
            ),
            ListTile(
              leading: const Icon(Icons.history),
              title: const Text('Bitácora'),
              selected: section == UCIPSSection.auditoria,
              onTap: () => setState(() => section = UCIPSSection.auditoria),
            ),
            Divider(),
            ListTile(
              leading: const Icon(Icons.exit_to_app),
              title: const Text('Cerrar sesión'),
              onTap: () {
                context.read<AuthBloc>().add(AuthLogoutRequested());
                context.go('/login');
              },
            ),
          ],
        ),
      ),
      body: Row(
        children: [
          Expanded(
            child: Container(
              color: const Color(0xFFF8F9FA),
              child: SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 16),
                  child: Align(
                    alignment: Alignment.topCenter,
                    child: Builder(
                      builder: (context) {
                        switch (section) {
                          case UCIPSSection.dashboard:
                            return _buildDashboard();
                          case UCIPSSection.registro:
                            return _buildRegistro();
                          case UCIPSSection.consulta:
                            return _buildConsulta();
                          case UCIPSSection.turnado:
                            return _buildTurnado();
                          case UCIPSSection.acuse:
                            return _buildAcuse();
                          case UCIPSSection.usuarios:
                            return _buildUsuarios();
                          case UCIPSSection.auditoria:
                            return _buildAuditoria();
                        }
                        return const SizedBox();
                      },
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Mejoro el widget reutilizable para tarjetas
class _ReusableWidget extends StatelessWidget {
  final String text;
  final IconData? icon;
  final Color? color;

  const _ReusableWidget({Key? key, required this.text, this.icon, this.color}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      color: color ?? Colors.blue[50],
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 28, horizontal: 20),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (icon != null)
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(10),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.04),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                padding: const EdgeInsets.all(8),
                margin: const EdgeInsets.only(right: 16),
                child: Icon(icon, color: Colors.blue[900], size: 32),
              ),
            Expanded(
              child: Text(
                text,
                style: const TextStyle(
                  fontSize: 18,
                  color: Color(0xFF1A237E),
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Widget privado para el formulario de registro de documento
class _RegistroDocumentoForm extends StatelessWidget {
  final bool registroExitoso;
  final String? archivoNombre;
  final String tipoDocumento;
  final String asunto;
  final String area;
  final String solicitante;
  final bool acuse;
  final GlobalKey<FormState> formKey;
  final ValueChanged<String> onTipoDocumentoChanged;
  final ValueChanged<String> onAsuntoChanged;
  final ValueChanged<String> onAreaChanged;
  final ValueChanged<String> onSolicitanteChanged;
  final ValueChanged<bool> onAcuseChanged;
  final VoidCallback onSubirArchivo;
  final VoidCallback onRegistrar;

  const _RegistroDocumentoForm({
    Key? key,
    required this.registroExitoso,
    required this.archivoNombre,
    required this.tipoDocumento,
    required this.asunto,
    required this.area,
    required this.solicitante,
    required this.acuse,
    required this.formKey,
    required this.onTipoDocumentoChanged,
    required this.onAsuntoChanged,
    required this.onAreaChanged,
    required this.onSolicitanteChanged,
    required this.onAcuseChanged,
    required this.onSubirArchivo,
    required this.onRegistrar,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Usamos un enfoque a prueba de fallos con constraints explícitos
    return SingleChildScrollView(
      physics: const ClampingScrollPhysics(),
      child: ConstrainedBox(
        constraints: const BoxConstraints(minHeight: 100),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('Registro de Documento', 
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 16),
            // Mensaje de éxito
            if (registroExitoso)
              const _ReusableWidget(
                text: '¡Documento registrado exitosamente!',
                icon: Icons.check_circle_outline,
                color: Color(0xFFC8E6C9),
              ),
            const SizedBox(height: 8),
            // Envolvemos el Form en un Builder para aislar la reconstrucción
            Form(
              key: formKey,
              // Aseguramos que todos los campos tengan constraints definidos
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Campo tipo documento
                  DropdownButtonFormField<String>(
                    value: tipoDocumento,
                    isExpanded: true, // Evita overflow horizontal
                    decoration: const InputDecoration(
                      labelText: 'Tipo de documento',
                      contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                    ),
                    items: const [
                      DropdownMenuItem(value: 'Entrada', child: Text('Entrada')),
                      DropdownMenuItem(value: 'Salida', child: Text('Salida')),
                    ],
                    onChanged: (v) => onTipoDocumentoChanged(v ?? 'Entrada'),
                  ),
                  const SizedBox(height: 12),
                  
                  // Campo asunto
                  TextFormField(
                    decoration: const InputDecoration(
                      labelText: 'Asunto',
                      contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                    ),
                    initialValue: asunto,
                    onChanged: onAsuntoChanged,
                    validator: (v) => (v == null || v.isEmpty) ? 'Campo requerido' : null,
                  ),
                  const SizedBox(height: 12),
                  
                  // Campo área
                  TextFormField(
                    decoration: const InputDecoration(
                      labelText: 'Área',
                      contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                    ),
                    initialValue: area,
                    onChanged: onAreaChanged,
                    validator: (v) => (v == null || v.isEmpty) ? 'Campo requerido' : null,
                  ),
                  const SizedBox(height: 12),
                  
                  // Campo solicitante
                  TextFormField(
                    decoration: const InputDecoration(
                      labelText: 'Solicitante',
                      contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                    ),
                    initialValue: solicitante,
                    onChanged: onSolicitanteChanged,
                    validator: (v) => (v == null || v.isEmpty) ? 'Campo requerido' : null,
                  ),
                  const SizedBox(height: 16),
                  
                  // Sección de archivo - versión simplificada para evitar problemas de layout
                  Container(
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey.shade300),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    padding: const EdgeInsets.all(12),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                archivoNombre ?? 'Ningún archivo seleccionado',
                                overflow: TextOverflow.ellipsis,
                                style: TextStyle(
                                  color: archivoNombre != null ? Colors.green.shade700 : Colors.grey.shade700,
                                  fontWeight: archivoNombre != null ? FontWeight.w500 : FontWeight.normal,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 10),
                        SizedBox(
                          height: 36,
                          child: ElevatedButton.icon(
                            icon: const Icon(Icons.upload_file, size: 16),
                            label: const Text('Seleccionar PDF'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade700,
                              elevation: 1,
                            ),
                            onPressed: onSubirArchivo,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 12),
                  
                  // Opción de acuse
                  CheckboxListTile(
                    contentPadding: EdgeInsets.zero,
                    dense: true,
                    value: acuse,
                    onChanged: (v) => onAcuseChanged(v ?? false),
                    title: const Text('¿Requiere acuse digital?'),
                  ),
                  const SizedBox(height: 20),
                  
                  // Botón registrar
                  SizedBox(
                    width: double.infinity,
                    height: 46,
                    child: ElevatedButton(
                      onPressed: onRegistrar,
                      style: ElevatedButton.styleFrom(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        textStyle: const TextStyle(fontSize: 16),
                      ),
                      child: const Text('Registrar'),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
